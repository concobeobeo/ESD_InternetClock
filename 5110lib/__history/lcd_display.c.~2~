///////////////////////////////////////////////////////////////////////////
////                                                                   ////
////                            NOKIA5110.c                            ////
////                                                                   ////
////                     Driver for CCS C compiler                     ////
////                                                                   ////
////  Driver for Nokia 5110 - 3310 LCD (PCD8544 controller).           ////
////                                                                   ////
///////////////////////////////////////////////////////////////////////////
////                                                                   ////
////                    https://simple-circuit.com/                    ////
////                                                                   ////
///////////////////////////////////////////////////////////////////////////


#include <stdint.h>

#define LCDWIDTH  84
#define LCDHEIGHT 48

#define LCD_POWERDOWN            0x04
#define LCD_ENTRYMODE            0x02
#define LCD_EXTENDEDINSTRUCTION  0x01

#define LCD_DISPLAYBLANK         0x00
#define LCD_DISPLAYNORMAL        0x04
#define LCD_DISPLAYALLON         0x01
#define LCD_DISPLAYINVERTED      0x05

// H = 0
#define LCD_FUNCTIONSET          0x20
#define LCD_DISPLAYCONTROL       0x08
#define LCD_SETYADDR             0x40
#define LCD_SETXADDR             0x80

// H = 1
#define LCD_SETTEMP  0x04
#define LCD_SETBIAS  0x10
#define LCD_SETVOP   0x80

//*************************** User Functions ***************************//
void LCD_Begin();
void LCD_SetContrast(uint8_t con);
void LCD_Display();
void LCD_DrawPixel(uint8_t x, uint8_t y, int1 color = TRUE);
void LCD_DrawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int1 color = TRUE);
void LCD_DrawHLine(uint8_t x, uint8_t y, uint8_t w, int1 color = TRUE);
void LCD_DrawVLine(uint8_t x, uint8_t y, uint8_t w, int1 color = TRUE);
void LCD_FillRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, int1 color = TRUE);
void LCD_DrawCircle(int16_t x0, int16_t y0, int16_t r);
void LCD_DrawCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername);
void LCD_FillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, int16_t delta, int1 color = TRUE);
void LCD_FillCircle(int16_t x0, int16_t y0, int16_t r, int1 color = TRUE);
void LCD_DrawRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h);
void LCD_DrawRoundRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t r);
void LCD_FillRoundRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t r, int1 color = TRUE);
void LCD_DrawTriangle(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2);
void LCD_FillTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, int1 color = TRUE);
void LCD_Clear();
void LCD_Fill();
void LCD_TextSize(uint8_t t_size);
void LCD_GotoXY(uint8_t x, uint8_t y);
void LCD_TextWrap(int1 w);
void LCD_Print(uint8_t c);
void LCD_PutCustomC(rom uint8_t *c);
void LCD_Invert(int1 inv);
void LCD_ROMBMP(uint8_t x, uint8_t y, rom uint8_t *bitmap, uint8_t w, uint8_t h);
void LCD_RAMBMP(uint8_t x, uint8_t y, uint8_t *bitmap, uint8_t w, uint8_t h);

//************************* Non User Functions *************************//
void write_command(uint8_t c_);
void write_data(uint8_t d_);

/////////////////////////////////////////////////////////////////////////

#define LCD_swap(a, b) { int16_t t = a; a = b; b = t; }
uint8_t x_pos = 0, y_pos = 0, text_size = 1;
int1 wrap = 1;

uint8_t lcd_buffer[504] = {   // 504 = LCDWIDTH * LCDHEIGHT / 8
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

const char Font[] = {
0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x5F, 0x00, 0x00,
0x00, 0x07, 0x00, 0x07, 0x00,
0x14, 0x7F, 0x14, 0x7F, 0x14,
0x24, 0x2A, 0x7F, 0x2A, 0x12,
0x23, 0x13, 0x08, 0x64, 0x62,
0x36, 0x49, 0x56, 0x20, 0x50,
0x00, 0x08, 0x07, 0x03, 0x00,
0x00, 0x1C, 0x22, 0x41, 0x00,
0x00, 0x41, 0x22, 0x1C, 0x00,
0x2A, 0x1C, 0x7F, 0x1C, 0x2A,
0x08, 0x08, 0x3E, 0x08, 0x08,
0x00, 0x80, 0x70, 0x30, 0x00,
0x08, 0x08, 0x08, 0x08, 0x08,
0x00, 0x00, 0x60, 0x60, 0x00,
0x20, 0x10, 0x08, 0x04, 0x02,
0x3E, 0x51, 0x49, 0x45, 0x3E,
0x00, 0x42, 0x7F, 0x40, 0x00,
0x72, 0x49, 0x49, 0x49, 0x46,
0x21, 0x41, 0x49, 0x4D, 0x33,
0x18, 0x14, 0x12, 0x7F, 0x10,
0x27, 0x45, 0x45, 0x45, 0x39,
0x3C, 0x4A, 0x49, 0x49, 0x31,
0x41, 0x21, 0x11, 0x09, 0x07,
0x36, 0x49, 0x49, 0x49, 0x36,
0x46, 0x49, 0x49, 0x29, 0x1E,
0x00, 0x00, 0x14, 0x00, 0x00,
0x00, 0x40, 0x34, 0x00, 0x00,
0x00, 0x08, 0x14, 0x22, 0x41,
0x14, 0x14, 0x14, 0x14, 0x14,
0x00, 0x41, 0x22, 0x14, 0x08,
0x02, 0x01, 0x59, 0x09, 0x06,
0x3E, 0x41, 0x5D, 0x59, 0x4E,
0x7C, 0x12, 0x11, 0x12, 0x7C,
0x7F, 0x49, 0x49, 0x49, 0x36,
0x3E, 0x41, 0x41, 0x41, 0x22,
0x7F, 0x41, 0x41, 0x41, 0x3E,
0x7F, 0x49, 0x49, 0x49, 0x41,
0x7F, 0x09, 0x09, 0x09, 0x01,
0x3E, 0x41, 0x41, 0x51, 0x73,
0x7F, 0x08, 0x08, 0x08, 0x7F,
0x00, 0x41, 0x7F, 0x41, 0x00,
0x20, 0x40, 0x41, 0x3F, 0x01,
0x7F, 0x08, 0x14, 0x22, 0x41,
0x7F, 0x40, 0x40, 0x40, 0x40,
0x7F, 0x02, 0x1C, 0x02, 0x7F,
0x7F, 0x04, 0x08, 0x10, 0x7F,
0x3E, 0x41, 0x41, 0x41, 0x3E,
0x7F, 0x09, 0x09, 0x09, 0x06,
0x3E, 0x41, 0x51, 0x21, 0x5E,
0x7F, 0x09, 0x19, 0x29, 0x46
};
const char Font2[] = {
0x26, 0x49, 0x49, 0x49, 0x32,
0x03, 0x01, 0x7F, 0x01, 0x03,
0x3F, 0x40, 0x40, 0x40, 0x3F,
0x1F, 0x20, 0x40, 0x20, 0x1F,
0x3F, 0x40, 0x38, 0x40, 0x3F,
0x63, 0x14, 0x08, 0x14, 0x63,
0x03, 0x04, 0x78, 0x04, 0x03,
0x61, 0x59, 0x49, 0x4D, 0x43,
0x00, 0x7F, 0x41, 0x41, 0x41,
0x02, 0x04, 0x08, 0x10, 0x20,
0x00, 0x41, 0x41, 0x41, 0x7F,
0x04, 0x02, 0x01, 0x02, 0x04,
0x40, 0x40, 0x40, 0x40, 0x40,
0x00, 0x03, 0x07, 0x08, 0x00,
0x20, 0x54, 0x54, 0x78, 0x40,
0x7F, 0x28, 0x44, 0x44, 0x38,
0x38, 0x44, 0x44, 0x44, 0x28,
0x38, 0x44, 0x44, 0x28, 0x7F,
0x38, 0x54, 0x54, 0x54, 0x18,
0x00, 0x08, 0x7E, 0x09, 0x02,
0x18, 0xA4, 0xA4, 0x9C, 0x78,
0x7F, 0x08, 0x04, 0x04, 0x78,
0x00, 0x44, 0x7D, 0x40, 0x00,
0x20, 0x40, 0x40, 0x3D, 0x00,
0x7F, 0x10, 0x28, 0x44, 0x00,
0x00, 0x41, 0x7F, 0x40, 0x00,
0x7C, 0x04, 0x78, 0x04, 0x78,
0x7C, 0x08, 0x04, 0x04, 0x78,
0x38, 0x44, 0x44, 0x44, 0x38,
0xFC, 0x18, 0x24, 0x24, 0x18,
0x18, 0x24, 0x24, 0x18, 0xFC,
0x7C, 0x08, 0x04, 0x04, 0x08,
0x48, 0x54, 0x54, 0x54, 0x24,
0x04, 0x04, 0x3F, 0x44, 0x24,
0x3C, 0x40, 0x40, 0x20, 0x7C,
0x1C, 0x20, 0x40, 0x20, 0x1C,
0x3C, 0x40, 0x30, 0x40, 0x3C,
0x44, 0x28, 0x10, 0x28, 0x44,
0x4C, 0x90, 0x90, 0x90, 0x7C,
0x44, 0x64, 0x54, 0x4C, 0x44,
0x00, 0x08, 0x36, 0x41, 0x00,
0x00, 0x00, 0x77, 0x00, 0x00,
0x00, 0x41, 0x36, 0x08, 0x00,
0x02, 0x01, 0x02, 0x04, 0x02
};

void write_command(uint8_t c_)
{
  output_low(LCD_DC);
  #ifdef LCD_CS
  output_low(LCD_CS);
  #endif
  SPI_XFER(LCD_STREAM, c_);
  #ifdef LCD_CS
  output_high(LCD_CS);
  #endif
}

void write_data(uint8_t d_)
{
  output_high(LCD_DC);
  #ifdef LCD_CS
  output_low(LCD_CS);
  #endif
  SPI_XFER(LCD_STREAM, d_);
  #ifdef LCD_CS
  output_high(LCD_CS);
  #endif
}

void LCD_Begin()
{
  delay_ms(100);
  output_drive(LCD_DC);
  #ifdef LCD_CS
  output_high(LCD_CS);
  output_drive(LCD_CS);
  #endif
  #ifdef LCD_RST
  output_drive(LCD_RST);
  // rest the LCD
  output_low(LCD_RST);
  delay_ms(500);
  output_high(LCD_RST);
  #endif

  // get into the EXTENDED mode
  write_command(LCD_FUNCTIONSET | LCD_EXTENDEDINSTRUCTION );

  // set bias voltage
  write_command(LCD_SETBIAS | 0x03);

  // set contrast
  write_command( LCD_SETVOP | 0x32);

  // normal mode
  write_command(LCD_FUNCTIONSET);

  // set display to normal mode
  write_command(LCD_DISPLAYCONTROL | LCD_DISPLAYNORMAL);

  LCD_Display();
}

void LCD_SetContrast(uint8_t con)
{
  if (con > 0x7f)
    con = 0x7f;

  write_command(LCD_FUNCTIONSET | LCD_EXTENDEDINSTRUCTION );
  write_command( LCD_SETVOP | con); 
  write_command(LCD_FUNCTIONSET);
 }

void LCD_Display()
{
  write_command(LCD_SETYADDR);  // set y = 0
  write_command(LCD_SETXADDR);  // set x = 0

  output_high(LCD_DC);
  #ifdef LCD_CS
    output_low(LCD_CS);
  #endif

  for(uint16_t i = 0; i < 504; i++)  // 504 = LCDWIDTH*LCDHEIGHT / 8
    SPI_XFER(LCD_STREAM, lcd_buffer[i] );

  #ifdef LCD_CS
    output_high(LCD_CS);
  #endif

}

void LCD_DrawPixel(uint8_t x, uint8_t y, int1 color = TRUE)
{
  if ((x >= LCDWIDTH) || (y >= LCDHEIGHT))
    return;

  if (color)
    lcd_buffer[x + (uint16_t)(y / 8) * LCDWIDTH] |=  (1 << (y & 7));

  else
    lcd_buffer[x + (uint16_t)(y / 8) * LCDWIDTH] &=  ~(1 << (y & 7));
}

void LCD_DrawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int1 color = TRUE)
{
  int1 steep;
  int8_t ystep;
  uint8_t dx, dy;
  int16_t err;
  steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
    LCD_swap(x0, y0);
    LCD_swap(x1, y1);
  }
  if (x0 > x1) {
    LCD_swap(x0, x1);
    LCD_swap(y0, y1);
  }
  dx = x1 - x0;
  dy = abs(y1 - y0);

  err = dx / 2;
  if (y0 < y1)
    ystep = 1;
  else
    ystep = -1;

  for (; x0 <= x1; x0++) {
    if (steep) {
      if(color) LCD_DrawPixel(y0, x0);
      else      LCD_DrawPixel(y0, x0, FALSE);
    }
    else {
      if(color) LCD_DrawPixel(x0, y0);
      else      LCD_DrawPixel(x0, y0, FALSE);
    }
    err -= dy;
    if (err < 0) {
      y0  += ystep;
      err += dx;
    }
  }
}

void LCD_DrawHLine(uint8_t x, uint8_t y, uint8_t w, int1 color = TRUE)
{
   LCD_DrawLine(x, y, x + w - 1, y, color);
}

void LCD_DrawVLine(uint8_t x, uint8_t y, uint8_t h, int1 color = TRUE)
{
  LCD_DrawLine(x, y, x, y + h - 1, color);
}

void LCD_FillRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, int1 color = TRUE)
{
  for (int16_t i = x; i < x + w; i++)
    LCD_DrawVLine(i, y, h, color);
}

void LCD_DrawCircle(int16_t x0, int16_t y0, int16_t r)
{
  int16_t f = 1 - r;
  int16_t ddF_x = 1;
  int16_t ddF_y = -2 * r;
  int16_t x = 0;
  int16_t y = r;

  LCD_DrawPixel(x0  , y0 + r);
  LCD_DrawPixel(x0  , y0 - r);
  LCD_DrawPixel(x0 + r, y0);
  LCD_DrawPixel(x0 - r, y0);

  while (x < y) {
    if (f >= 0) {
      y--;
      ddF_y += 2;
      f += ddF_y;
    }
    x++;
    ddF_x += 2;
    f += ddF_x;

    LCD_DrawPixel(x0 + x, y0 + y);
    LCD_DrawPixel(x0 - x, y0 + y);
    LCD_DrawPixel(x0 + x, y0 - y);
    LCD_DrawPixel(x0 - x, y0 - y);
    LCD_DrawPixel(x0 + y, y0 + x);
    LCD_DrawPixel(x0 - y, y0 + x);
    LCD_DrawPixel(x0 + y, y0 - x);
    LCD_DrawPixel(x0 - y, y0 - x);
  }

}

void LCD_DrawCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername)
{
  int16_t f     = 1 - r;
  int16_t ddF_x = 1;
  int16_t ddF_y = -2 * r;
  int16_t x     = 0;
  int16_t y     = r;

  while (x < y) {
    if (f >= 0) {
      y--;
      ddF_y += 2;
      f     += ddF_y;
    }
    x++;
    ddF_x += 2;
    f     += ddF_x;
    if (cornername & 0x4) {
      LCD_DrawPixel(x0 + x, y0 + y);
      LCD_DrawPixel(x0 + y, y0 + x);
    }
    if (cornername & 0x2) {
      LCD_DrawPixel(x0 + x, y0 - y);
      LCD_DrawPixel(x0 + y, y0 - x);
    }
    if (cornername & 0x8) {
      LCD_DrawPixel(x0 - y, y0 + x);
      LCD_DrawPixel(x0 - x, y0 + y);
    }
    if (cornername & 0x1) {
      LCD_DrawPixel(x0 - y, y0 - x);
      LCD_DrawPixel(x0 - x, y0 - y);
    }
  }

}

// Used to do circles and roundrects
void LCD_FillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, int16_t delta, int1 color = TRUE)
{
  int16_t f     = 1 - r;
  int16_t ddF_x = 1;
  int16_t ddF_y = -2 * r;
  int16_t x     = 0;
  int16_t y     = r;

  while (x < y) {
    if (f >= 0) {
      y--;
      ddF_y += 2;
      f     += ddF_y;
    }
    x++;
    ddF_x += 2;
    f     += ddF_x;

    if (cornername & 0x01) {
      LCD_DrawVLine(x0 + x, y0 - y, 2 * y + 1 + delta, color);
      LCD_DrawVLine(x0 + y, y0 - x, 2 * x + 1 + delta, color);
    }
    if (cornername & 0x02) {
      LCD_DrawVLine(x0 - x, y0 - y, 2 * y + 1 + delta, color);
      LCD_DrawVLine(x0 - y, y0 - x, 2 * x + 1 + delta, color);
    }
  }

}

void LCD_FillCircle(int16_t x0, int16_t y0, int16_t r, int1 color = TRUE)
{
  LCD_DrawVLine(x0, y0 - r, 2 * r + 1, color);
  LCD_FillCircleHelper(x0, y0, r, 3, 0, color);
}

// Draw a rectangle
void LCD_DrawRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h)
{
  LCD_DrawHLine(x, y, w);
  LCD_DrawHLine(x, y + h - 1, w);
  LCD_DrawVLine(x, y, h);
  LCD_DrawVLine(x + w - 1, y, h);
}

// Draw a rounded rectangle
void LCD_DrawRoundRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t r)
{
  // smarter version
  LCD_DrawHLine(x + r, y, w - 2 * r); // Top
  LCD_DrawHLine(x + r, y + h - 1, w - 2 * r); // Bottom
  LCD_DrawVLine(x, y + r, h - 2 * r); // Left
  LCD_DrawVLine(x + w - 1, y + r, h - 2 * r); // Right
  // draw four corners
  LCD_DrawCircleHelper(x + r, y + r, r, 1);
  LCD_DrawCircleHelper(x + w - r - 1, y + r, r, 2);
  LCD_DrawCircleHelper(x + w - r - 1, y + h - r - 1, r, 4);
  LCD_DrawCircleHelper(x + r, y + h - r - 1, r, 8);
}

// Fill a rounded rectangle
void LCD_FillRoundRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t r, int1 color = TRUE)
{
  // smarter version
  LCD_FillRect(x + r, y, w - 2 * r, h, color);
  // draw four corners
  LCD_FillCircleHelper(x + w - r - 1, y + r, r, 1, h - 2 * r - 1, color);
  LCD_FillCircleHelper(x + r        , y + r, r, 2, h - 2 * r - 1, color);
}

// Draw a triangle
void LCD_DrawTriangle(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2)
{
  LCD_DrawLine(x0, y0, x1, y1);
  LCD_DrawLine(x1, y1, x2, y2);
  LCD_DrawLine(x2, y2, x0, y0);
}

void LCD_FillTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, int1 color = TRUE)
{
  int16_t a, b, y, last;
  // Sort coordinates by Y order (y2 >= y1 >= y0)
  if (y0 > y1) {
    LCD_swap(y0, y1); LCD_swap(x0, x1);
  }
  if (y1 > y2) {
    LCD_swap(y2, y1); LCD_swap(x2, x1);
  }
  if (y0 > y1) {
    LCD_swap(y0, y1); LCD_swap(x0, x1);
  }

  if(y0 == y2) { // Handle awkward all-on-same-line case as its own thing
    a = b = x0;
    if(x1 < a)      a = x1;
    else if(x1 > b) b = x1;
    if(x2 < a)      a = x2;
    else if(x2 > b) b = x2;
    LCD_DrawHLine(a, y0, b - a + 1, color);
    return;
  }

  int16_t
  dx01 = x1 - x0,
  dy01 = y1 - y0,
  dx02 = x2 - x0,
  dy02 = y2 - y0,
  dx12 = x2 - x1,
  dy12 = y2 - y1;
  int32_t  sa   = 0, sb   = 0;

  if(y1 == y2) last = y1;
  else         last = y1 - 1;

  for(y = y0; y <= last; y++) {
    a   = x0 + sa / dy01;
    b   = x0 + sb / dy02;
    sa += dx01;
    sb += dx02;

    if(a > b) LCD_swap(a, b);
    LCD_DrawHLine(a, y, b - a + 1, color);
  }

  sa = dx12 * (y - y1);
  sb = dx02 * (y - y0);
  for(; y <= y2; y++) {
    a   = x1 + sa / dy12;
    b   = x0 + sb / dy02;
    sa += dx12;
    sb += dx02;

    if(a > b) LCD_swap(a, b);
    LCD_DrawHLine(a, y, b - a + 1, color);
  }
}

void LCD_Clear()
{
  for (uint16_t i = 0; i < 504; i++)  // 504 = LCDWIDTH*LCDHEIGHT / 8
    lcd_buffer[i] = 0;
}

void LCD_Fill()
{
  for (uint16_t i = 0; i < 504; i++)  // 504 = LCDWIDTH*LCDHEIGHT / 8
    lcd_buffer[i] = 0xFF;
}

void LCD_TextSize(uint8_t t_size)
{
  if(t_size < 1)
    return;
  text_size = t_size;
}

void LCD_GotoXY(uint8_t x, uint8_t y)
{
  if((x >= LCDWIDTH) || (y >= LCDHEIGHT))
    return;
  x_pos = x;
  y_pos = y;
}

void LCD_TextWrap(int1 w)
{
  wrap = w;
}

/* print single char
    \a  Set cursor position to upper left (0, 0)
    \b  Move back one position
    \n  Go to start of current line
    \r  Go to line below
*/
void LCD_Print(uint8_t c)
{
  int1 _color;
  uint8_t i, j, line;
  
  if (c == ' ' && x_pos == 0 && wrap)
    return;
  if(c == '\a') {
    x_pos = y_pos = 0;
    return;
  }
  if( (c == '\b') && (x_pos >= text_size * 6) ) {
    x_pos -= text_size * 6;
    return;
  }
  if(c == '\r') {
    x_pos = 0;
    return;
  }
  if(c == '\n') {
    y_pos += text_size * 8;
    if((y_pos + text_size * 7) > LCDHEIGHT)
      y_pos = 0;
    return;
  }
  
  if((c < ' ') || (c > '~'))
    c = '?';
  
  for(i = 0; i < 5; i++ ) {
    if(c < 'S')
      line = font[(c - ' ') * 5 + i];
    else
      line = font2[(c - 'S') * 5 + i];
    
    for(j = 0; j < 7; j++, line >>= 1) {
      if(line & 0x01)
        _color = TRUE;
      else
        _color = FALSE;
      if(text_size == 1) LCD_DrawPixel(x_pos + i, y_pos + j, _color);
      else               LCD_FillRect(x_pos + (i * text_size), y_pos + (j * text_size), text_size, text_size, _color);
    }
  }

  LCD_FillRect(x_pos + (5 * text_size), y_pos, text_size, 7 * text_size, FALSE);
  
  x_pos += text_size * 6;
  
  if( x_pos > (LCDWIDTH + text_size * 6) )
    x_pos = LCDWIDTH;

  if (wrap && (x_pos + (text_size * 5)) > LCDWIDTH)
  {
    x_pos = 0;
    y_pos += text_size * 8;
    if((y_pos + text_size * 7) > LCDHEIGHT)
      y_pos = 0;
  }
}

// print custom char (dimension: 7x5 pixel)
void LCD_PutCustomC(rom uint8_t *c)
{
  int1 _color;
  uint8_t i, j, line;
  
  for(i = 0; i < 5; i++ ) {
    line = c[i];

    for(j = 0; j < 7; j++, line >>= 1) {
      if(line & 0x01)
        _color = TRUE;
      else
        _color = FALSE;
      if(text_size == 1) LCD_DrawPixel(x_pos + i, y_pos + j, _color);
      else               LCD_FillRect(x_pos + (i * text_size), y_pos + (j * text_size), text_size, text_size, _color);
    }
  }

  LCD_FillRect(x_pos + (5 * text_size), y_pos, text_size, 7 * text_size, FALSE);

  x_pos += (text_size * 6);

  if( x_pos > (LCDWIDTH + text_size * 6) )
    x_pos = LCDWIDTH;

  if (wrap && (x_pos + (text_size * 5)) > LCDWIDTH)
  {
    x_pos = 0;
    y_pos += text_size * 8;
    if((y_pos + text_size * 7) > LCDHEIGHT)
      y_pos = 0;
  }
}

void LCD_Invert(int1 inv)
{
  if(inv == 1)
    write_command(LCD_DISPLAYCONTROL | LCD_DISPLAYINVERTED);
  else
    write_command(LCD_DISPLAYCONTROL | LCD_DISPLAYNORMAL);
}

// draw BMP stored in ROM
void LCD_ROMBMP(uint8_t x, uint8_t y, rom uint8_t *bitmap, uint8_t w, uint8_t h)
{
  for( uint16_t i = 0; i < h/8; i++)
  {    
    for( uint16_t j = 0; j < (uint16_t)w * 8; j++)
    {      
      if( bit_test(bitmap[j/8 + i*w], j % 8) == 1 )
        LCD_DrawPixel(x + j/8, y + i*8 + (j % 8));
      else
        LCD_DrawPixel(x + j/8, y + i*8 + (j % 8), 0);  
    }
  }
}

// draw BMP stored in RAM
void LCD_RAMBMP(uint8_t x, uint8_t y, uint8_t *bitmap, uint8_t w, uint8_t h)
{    
  for( uint16_t i = 0; i < h/8; i++)
  {    
    for( uint16_t j = 0; j < (uint16_t)w * 8; j++)
    {      
      if( bit_test(bitmap[j/8 + i*w], j % 8) == 1 )
        LCD_DrawPixel(x + j/8, y + i*8 + (j % 8));
      else
        LCD_DrawPixel(x + j/8, y + i*8 + (j % 8), 0);  
    }
  }
}

// end of code.
