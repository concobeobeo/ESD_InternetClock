char CONST TABLE1 [240] = {
                  0x00, 0x00, 0x00, 0x00, 0x00,
                  0x00, 0x00, 0x5F, 0x00, 0x00,
                  0x00, 0x07, 0x00, 0x07, 0x00,
                  0x14, 0x7F, 0x14, 0x7F, 0x14,
                  0x24, 0x2A, 0x7F, 0x2A, 0x12,
                  0x23, 0x13, 0x08, 0x64, 0x62,
                  0x36, 0x49, 0x56, 0x20, 0x50,
                  0x00, 0x08, 0x07, 0x03, 0x00,
                  0x00, 0x1C, 0x22, 0x41, 0x00,
                  0x00, 0x41, 0x22, 0x1C, 0x00,
                  0x2A, 0x1C, 0x7F, 0x1C, 0x2A,
                  0x08, 0x08, 0x3E, 0x08, 0x08,
                  0x00, 0x80, 0x70, 0x30, 0x00,
                  0x08, 0x08, 0x08, 0x08, 0x08,
                  0x00, 0x00, 0x60, 0x60, 0x00,
                  0x20, 0x10, 0x08, 0x04, 0x02,
                  0x3E, 0x51, 0x49, 0x45, 0x3E,
                  0x00, 0x42, 0x7F, 0x40, 0x00,
                  0x72, 0x49, 0x49, 0x49, 0x46,
                  0x21, 0x41, 0x49, 0x4D, 0x33,
                  0x18, 0x14, 0x12, 0x7F, 0x10,
                  0x27, 0x45, 0x45, 0x45, 0x39,
                  0x3C, 0x4A, 0x49, 0x49, 0x31,
                  0x41, 0x21, 0x11, 0x09, 0x07,
                  0x36, 0x49, 0x49, 0x49, 0x36,
                  0x46, 0x49, 0x49, 0x29, 0x1E,
                  0x00, 0x00, 0x14, 0x00, 0x00,
                  0x00, 0x40, 0x34, 0x00, 0x00,
                  0x00, 0x08, 0x14, 0x22, 0x41,
                  0x14, 0x14, 0x14, 0x14, 0x14,
                  0x00, 0x41, 0x22, 0x14, 0x08,
                  0x02, 0x01, 0x59, 0x09, 0x06,
                  0x3E, 0x41, 0x5D, 0x59, 0x4E,
                  0x7C, 0x12, 0x11, 0x12, 0x7C,
                  0x7F, 0x49, 0x49, 0x49, 0x36,
                  0x3E, 0x41, 0x41, 0x41, 0x22,
                  0x7F, 0x41, 0x41, 0x41, 0x3E,
                  0x7F, 0x49, 0x49, 0x49, 0x41,
                  0x7F, 0x09, 0x09, 0x09, 0x01,
                  0x3E, 0x41, 0x41, 0x51, 0x73,
                  0x7F, 0x08, 0x08, 0x08, 0x7F,
                  0x00, 0x41, 0x7F, 0x41, 0x00,
                  0x20, 0x40, 0x41, 0x3F, 0x01,
                  0x7F, 0x08, 0x14, 0x22, 0x41,
                  0x7F, 0x40, 0x40, 0x40, 0x40,
                  0x7F, 0x02, 0x1C, 0x02, 0x7F,
                  0x7F, 0x04, 0x08, 0x10, 0x7F,
                  0x3E, 0x41, 0x41, 0x41, 0x3E
                  };
char CONST TABLE2 [240] = {
                  0x7F, 0x09, 0x09, 0x09, 0x06,
                  0x3E, 0x41, 0x51, 0x21, 0x5E,
                  0x7F, 0x09, 0x19, 0x29, 0x46,
                  0x26, 0x49, 0x49, 0x49, 0x32,
                  0x03, 0x01, 0x7F, 0x01, 0x03,
                  0x3F, 0x40, 0x40, 0x40, 0x3F,
                  0x1F, 0x20, 0x40, 0x20, 0x1F,
                  0x3F, 0x40, 0x38, 0x40, 0x3F,
                  0x63, 0x14, 0x08, 0x14, 0x63,
                  0x03, 0x04, 0x78, 0x04, 0x03,
                  0x61, 0x59, 0x49, 0x4D, 0x43,
                  0x00, 0x7F, 0x41, 0x41, 0x41,
                  0x02, 0x04, 0x08, 0x10, 0x20,
                  0x00, 0x41, 0x41, 0x41, 0x7F,
                  0x04, 0x02, 0x01, 0x02, 0x04,
                  0x40, 0x40, 0x40, 0x40, 0x40,
                  0x00, 0x03, 0x07, 0x08, 0x00,
                  0x20, 0x54, 0x54, 0x78, 0x40,
                  0x7F, 0x28, 0x44, 0x44, 0x38,
                  0x38, 0x44, 0x44, 0x44, 0x28,
                  0x38, 0x44, 0x44, 0x28, 0x7F,
                  0x38, 0x54, 0x54, 0x54, 0x18,
                  0x00, 0x08, 0x7E, 0x09, 0x02,
                  0x18, 0xA4, 0xA4, 0x9C, 0x78,
                  0x7F, 0x08, 0x04, 0x04, 0x78,
                  0x00, 0x44, 0x7D, 0x40, 0x00,
                  0x20, 0x40, 0x40, 0x3D, 0x00,
                  0x7F, 0x10, 0x28, 0x44, 0x00,
                  0x00, 0x41, 0x7F, 0x40, 0x00,
                  0x7C, 0x04, 0x78, 0x04, 0x78,
                  0x7C, 0x08, 0x04, 0x04, 0x78,
                  0x38, 0x44, 0x44, 0x44, 0x38,
                  0xFC, 0x18, 0x24, 0x24, 0x18,
                  0x18, 0x24, 0x24, 0x18, 0xFC,
                  0x7C, 0x08, 0x04, 0x04, 0x08,
                  0x48, 0x54, 0x54, 0x54, 0x24,
                  0x04, 0x04, 0x3F, 0x44, 0x24,
                  0x3C, 0x40, 0x40, 0x20, 0x7C,
                  0x1C, 0x20, 0x40, 0x20, 0x1C,
                  0x3C, 0x40, 0x30, 0x40, 0x3C,
                  0x44, 0x28, 0x10, 0x28, 0x44,
                  0x4C, 0x90, 0x90, 0x90, 0x7C,
                  0x44, 0x64, 0x54, 0x4C, 0x44,
                  0x00, 0x08, 0x36, 0x41, 0x00,
                  0x00, 0x00, 0x77, 0x00, 0x00,
                  0x00, 0x41, 0x36, 0x08, 0x00,
                  0x02, 0x01, 0x02, 0x04, 0x02
                  };
                  
const char digits[260] = {
0xF0, 0xFC, 0x0E, 0x03, 0x83, 0xC3, 0xC3, 0x67, 0xFE, 0xF8, 0x0F, 0x7F, 0x76, 0xC3, 0xC3, 0xC1, 0xC0, 0x60, 0x3F, 0x1F, //0
0x0C, 0x06, 0x06, 0x03, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0xC0, 0xC0, 0xC0, 0xC0, 0xFF, 0xFF, 0xFF, 0xC0, 0xC0, 0xC0, //1
0x06, 0x06, 0x03, 0x03, 0x03, 0x03, 0xC7, 0xFE, 0x7C, 0x00, 0xE0, 0xF0, 0xF8, 0xDC, 0xCE, 0xC7, 0xC3, 0xC1, 0xC0, 0xC0, //2
0x03, 0x03, 0x83, 0x83, 0x83, 0x83, 0xC3, 0xFF, 0x7E, 0x38, 0xC0, 0xC0, 0xC1, 0xC1, 0xC1, 0xC1, 0xC1, 0xE3, 0xFF, 0x3E, //3 
0x00, 0x80, 0xE0, 0x70, 0x3C, 0x1E, 0x07, 0xFF, 0xFF, 0x00, 0x0F, 0x0F, 0x0D, 0x0C, 0x0C, 0x0C, 0x0C, 0xFF, 0xFF, 0x0C, //4
0xFF, 0xFF, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0x83, 0x03, 0x07, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xE0, 0x61, 0x7F, 0x3F, 0x00, //5
0xFC, 0xFF, 0xCF, 0xC7, 0xC3, 0xC3, 0xC3, 0xC3, 0x83, 0x00, 0x7F, 0xFF, 0xE1, 0xC0, 0xC0, 0xC0, 0xC0, 0xE1, 0x7F, 0x3F, //6
0x03, 0x03, 0x03, 0x03, 0x03, 0x83, 0xE3, 0xFB, 0x3F, 0x0F, 0x00, 0xC0, 0xF0, 0x78, 0x3E, 0x0F, 0x03, 0x00, 0x00, 0x00, //7
0x3C, 0x7E, 0xE7, 0xC3, 0xC3, 0xC3, 0xC3, 0xE7, 0x7F, 0x3E, 0x3E, 0x7F, 0xE3, 0xC1, 0xC1, 0xC1, 0xC3, 0xE3, 0x7F, 0x3E,  //8
0xFC, 0xFE, 0x87, 0x03, 0x03, 0x03, 0x03, 0x87, 0xFE, 0xFC, 0x00, 0xC1, 0xC3, 0xC3, 0xC3, 0xC3, 0xE3, 0x73, 0x3F, 0x1F, //9
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xF0, 0xF0, 0xE0, 0x00, 0x00, 0x00, //cham
0x00, 0x00, 0x00, 0x30, 0x70, 0x70, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0xE0, 0xE0, 0xE0, 0x00, 0x00, 0x00, //hai cham
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 //blank
};

void    lcd_init();
void    lcd_command(char command);
void    lcd_data(char data);
void    lcd_spi(char spi_data);
void    lcd_gotoxy(char x, char y);
void    lcd_printchar(char cvar);
void    lcd_clear();
void    table_to_lcd();
void    lcd_dot(char x, char y);
void    lcd_print_digit(char digit, char x, char y);

char char_row,charsel,charpos,chardata;
int16 ddram;

void lcd_init() {
   output_high(lcd_dc);            // Disable chuc nang Command
   output_high(lcd_cs);            // Chip disabled
   delay_us(200);

   output_low(lcd_res);             // reset 
   delay_ms(50);
   output_high(lcd_res);

   lcd_command(0x21); // 0010 0001 Active Mode/Tang address theo chieu ngang/Dung bang lenh mo rong
   lcd_command(0x04); // Vop=3,3V => Gia tri = (3.3-2.06)/0.06 = 4 = 0x04
   lcd_command(0x12); // Dieu chinh bias (contrast)
   lcd_command(0x20); // Khong Dung bang lenh mo rong
   
   lcd_command(0x09); // Chon mode hien thi: Normal

   delay_ms(50);
   lcd_clear();       // Clear LCD

   delay_ms(10);
   lcd_command(0x08); // Mode hien thi: Blank

   delay_ms(10);
   lcd_command(0x0c); // Mode hien thi: Normal
}

void lcd_clear() {
   lcd_gotoxy(0,0);         // 84*6=504      clear LCD
   for (ddram=504; ddram>0; ddram--)
      lcd_data(0x00);
}

void lcd_command(char command)
{
   output_low(lcd_dc); 
   output_low(lcd_cs);
   delay_us(2);
   lcd_spi(command);
   output_high(lcd_cs); 
   delay_us(2);
}

void lcd_data(char data)
{
   output_high(lcd_dc);
   output_low(lcd_cs);   
   delay_us(2);
   lcd_spi(data);
   output_high(lcd_cs); 
   delay_us(2);
}

void lcd_spi(char spi_data) {      // Gui lenh thong qua SDI
   char bit;
   for (bit=8;bit>0;bit--)
   {
      output_low(lcd_sclk);
      delay_us(2);
      output_bit(lcd_sda,(spi_data & 0x80));  // Moi lan co xung clock gui bit MSB
      output_high(lcd_sclk);
      delay_us(2);
      spi_data = spi_data << 1;  // Dich trai 1 bit cho msb 
   }
}

void lcd_gotoxy(char x, char y) {   // Pixel tai (x,y)
   lcd_command(0x40|(y&0x07));     // Lenh set address cua ram theo y: 0100 0yyy *Bang lenh LCD quy dinh*
   lcd_command(0x80|(x&0x7f));     // Lenh set address cua ram theo x: 1xxx xxxx *Bang lenh LCD quy dinh*
}

void lcd_printchar(char cvar) {               // Hien thi 1 ki tu ra LCD
   charsel = cvar;
   table_to_lcd();
}

/* 
   Giai thich table_to_lcd():
   Mot ki tu gom 5 phan tu cua mang (TABLE 1&2), vi vay charsel phai chia het cho 5.
   charrow la so cot cua 1 ki tu, co 5 cot, hien thi moi lan 1 cot, lap lai 5 lan duoc 1 ki tu.
   pointer da duoc thiet lap tu dong tang theo chieu ngang, khong can quan tam.
*/
void table_to_lcd() {                      // Truy ma ASCII tu bang va Hien thi
   if (charsel<0x20) return;
   if (charsel>0x7f) return;

   for (char_row=0;char_row<5;char_row++)
      {
         if (charsel<0x50){ // Dung TABLE1
            charpos=((charsel-0x20)*5);
            chardata=TABLE1[(charpos+char_row)];
         }   
         if (charsel>0x4f){ // Dung TABLE2
            charpos=((charsel-0x50)*5);
            chardata=TABLE2[(charpos+char_row)];
         }   
         lcd_data(chardata);        
      }
    lcd_data(0x00);
}

// Cham cai nhe o pixel (x, y)
void lcd_dot (char x, char y) {
    char offset;
    byte  data;

    if (x > 84) return;
    if (y > 48) return;
    // Dich 1 khoang trong sector
    offset = y % 8;
    data = (0x01<<offset);
    // Tai sector x y/8.    
    lcd_gotoxy(x, y);
    lcd_data(data);
}

void lcd_print_digit(char digit, char x, char y){
   int16_t temp;
   for (char row = 0; row <= 1; row++){
      lcd_gotoxy(x, y+row);
      for(char col = 0; col < 10; col++){
         temp = (digit*20)+(10*row)+col;
         lcd_data(digits[temp]);
      }
   }
}


